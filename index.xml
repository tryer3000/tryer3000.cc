<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A POEM OF LIFE</title>
    <link>http://blog.tryer3000.cc/</link>
    <description>Recent content on A POEM OF LIFE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 12 Apr 2017 12:41:10 +0800</lastBuildDate>
    
	<atom:link href="http://blog.tryer3000.cc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design Patterns Cheat Sheet</title>
      <link>http://blog.tryer3000.cc/post/cs-design-patterns/</link>
      <pubDate>Wed, 12 Apr 2017 12:41:10 +0800</pubDate>
      
      <guid>http://blog.tryer3000.cc/post/cs-design-patterns/</guid>
      <description>Abstract Factory
provide an interface for creating families of related or dependent objects without specifying their concrete classes Singleton
ensure a class only has one instance, and provide a global point of access to it. Borg
a singleton with shared-state among instances Builder
separate the construction of a complex object from its representation so that the same construction process can create different representations.
A single class tree is divided into two class tree: one for construction, anthor for representation</description>
    </item>
    
    <item>
      <title>Javascript Prototype</title>
      <link>http://blog.tryer3000.cc/post/js-prototype/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0800</pubDate>
      
      <guid>http://blog.tryer3000.cc/post/js-prototype/</guid>
      <description>note of You Don&amp;rsquo;t know JS
Data types in Javascript // Javascript has 6 primitive data(immutable) types typeof 3.14 // &#39;number&#39;; typeof &#39;bla&#39; // &#39;string&#39;; typeof true // &#39;boolean&#39; typeof Symbol.iterator // &#39;symbol&#39; typeof undefined // &#39;undefined&#39; typeof null // &#39;object&#39; // and object typeof {a:1} // &#39;object&#39; typeof function fn(){} // &#39;function&#39;, it&#39;s in fact an object with special type tag // object has sub type Object.prototype.toString.call(fn) // &#39;[object Function]&#39; // primitive types have object equivalent that wrap around them.</description>
    </item>
    
    <item>
      <title>Introduction to Vue</title>
      <link>http://blog.tryer3000.cc/post/vue-introduction/</link>
      <pubDate>Mon, 31 Oct 2016 08:42:14 +0800</pubDate>
      
      <guid>http://blog.tryer3000.cc/post/vue-introduction/</guid>
      <description>Basic &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; {{ message }} &amp;lt;/div&amp;gt;  var app = new Vue({ el: &#39;#app&#39;, data: { message: &#39;Hello Vue!&#39; } })  Vue inherits a lot from angular. Both has concept of directives and components.
We will skip those similarities, but focus on differences here.
Directive has Modifier and Arguments &amp;lt;input v-model.number=&amp;quot;age&amp;quot; type=&amp;quot;number&amp;quot;&amp;gt; &amp;lt;a v-bind:href=&amp;quot;url&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;   Modifiers are special postfixes denoted by a dot, which indicate that a directive should be bound in some special way.</description>
    </item>
    
    <item>
      <title>Webpack</title>
      <link>http://blog.tryer3000.cc/post/webpack/</link>
      <pubDate>Fri, 28 Oct 2016 08:42:14 +0800</pubDate>
      
      <guid>http://blog.tryer3000.cc/post/webpack/</guid>
      <description>Motivation or Problems  There are multiple standards of module system in JS world including CommonJS, AMD, ES6 modules and &amp;lt;script&amp;gt; tag style. There are two extremes when transferring modules  one request per module All modules in one request  Why should a module system only help the developer with JavaScript?  IO Webpack is a module bundler.
It takes a bunch of files, treating each as a module, figuring out the dependencies between them, and bundle them into static assets that are ready for deployment.</description>
    </item>
    
  </channel>
</rss>